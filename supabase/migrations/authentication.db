-- Enum types for various categorizations
CREATE TYPE user_type AS ENUM ('hotel', 'admin', 'partner');
CREATE TYPE subscription_plan AS ENUM ('basic', 'pro');
CREATE TYPE staff_role AS ENUM ('owner', 'manager', 'receptionist', 'housekeeper', 'maintenance', 'staff');
CREATE TYPE partner_type AS ENUM ('technology', 'hospitality_consultant', 'enterprise_chains', 'others');
CREATE TYPE user_status AS ENUM ('active', 'inactive', 'suspended');

-- User Profiles table (extends auth.users)
CREATE TABLE user_profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    user_type user_type NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone_number VARCHAR(20),
    status user_status DEFAULT 'active',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    last_login TIMESTAMPTZ
);

-- Hotel Profiles table
CREATE TABLE hotel_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    hotel_name VARCHAR(200) NOT NULL,
    subscription_plan subscription_plan DEFAULT 'basic',
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    address TEXT,
    city VARCHAR(100),
    state VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    is_verified BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(hotel_name, owner_id)
);

-- Hotel Staff table (for managing staff and their roles)
CREATE TABLE hotel_staff (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    hotel_id UUID REFERENCES hotel_profiles(id) ON DELETE CASCADE,
    role staff_role NOT NULL,
    permissions JSONB DEFAULT '{}',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, hotel_id, role)
);

-- Partner Profiles table
CREATE TABLE partner_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    partner_type partner_type NOT NULL,
    company_name VARCHAR(200),
    website VARCHAR(255),
    description TEXT,
    verified_by UUID REFERENCES auth.users(id), -- admin who verified
    is_verified BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Triggers for updated_at timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_profiles_updated_at
    BEFORE UPDATE ON user_profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_hotel_profiles_updated_at
    BEFORE UPDATE ON hotel_profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_hotel_staff_updated_at
    BEFORE UPDATE ON hotel_staff
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_partner_profiles_updated_at
    BEFORE UPDATE ON partner_profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security (RLS) Policies
-- Enable RLS on all tables
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE hotel_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE hotel_staff ENABLE ROW LEVEL SECURITY;
ALTER TABLE partner_profiles ENABLE ROW LEVEL SECURITY;

-- User Profiles policies
CREATE POLICY "Users can view their own profile"
    ON user_profiles FOR SELECT
    USING (auth.uid() = id);

CREATE POLICY "Admins can view all profiles"
    ON user_profiles FOR ALL
    USING (EXISTS (
        SELECT 1 FROM user_profiles
        WHERE id = auth.uid() AND user_type = 'admin'
    ));

-- Hotel Profiles policies
CREATE POLICY "Hotel owners can manage their hotels"
    ON hotel_profiles FOR ALL
    USING (owner_id = auth.uid());

CREATE POLICY "Staff can view their assigned hotels"
    ON hotel_profiles FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM hotel_staff
        WHERE hotel_staff.hotel_id = hotel_profiles.id
        AND hotel_staff.user_id = auth.uid()
    ));

-- Hotel Staff policies
CREATE POLICY "Hotel owners can manage staff"
    ON hotel_staff FOR ALL
    USING (EXISTS (
        SELECT 1 FROM hotel_profiles
        WHERE hotel_profiles.id = hotel_staff.hotel_id
        AND hotel_profiles.owner_id = auth.uid()
    ));

-- Partner Profiles policies
CREATE POLICY "Partners can view their own profile"
    ON partner_profiles FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Admins can manage partner profiles"
    ON partner_profiles FOR ALL
    USING (EXISTS (
        SELECT 1 FROM user_profiles
        WHERE id = auth.uid() AND user_type = 'admin'
    ));

-- Indexes for better query performance
CREATE INDEX idx_user_profiles_user_type ON user_profiles(user_type);
CREATE INDEX idx_hotel_profiles_owner_id ON hotel_profiles(owner_id);
CREATE INDEX idx_hotel_staff_user_id ON hotel_staff(user_id);
CREATE INDEX idx_hotel_staff_hotel_id ON hotel_staff(hotel_id);
CREATE INDEX idx_partner_profiles_user_id ON partner_profiles(user_id);
CREATE INDEX idx_partner_profiles_partner_type ON partner_profiles(partner_type);